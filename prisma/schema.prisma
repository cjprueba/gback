// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// oc port-forward pod/postgresql 5432:5432 -n lfuentes-dev
// oc port-forward svc/postgresql 15432:5432 -n lfuentes-dev

/*
Eliminar y volver a cargar base de datos 
# eliminar migrations
# npx prisma migrate reset
# npx prisma migrate dev --name add_unidad_division_relation - para agregar nombre a la modificacion
npx prisma db seed
*/
// para correr prisma - npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o el proveedor que uses (mysql, sqlite, sqlserver, mongodb, etc.)
  url      = env("DATABASE_URL")
}


model usuarios {
  id                  Int       @id @default(autoincrement())
  nombre_completo     String?   @db.VarChar(100)
  correo_electronico  String?   @unique  @db.VarChar(100)
  perfil_id           Int
  division_id         Int?
  departamento_id     Int?
  unidad_id           Int?
  activo              Boolean   @default(true)
  created_at          DateTime  @default(now())

  // Relaciones
  perfil              perfiles          @relation(fields: [perfil_id], references: [id])
  division            divisiones?       @relation(fields: [division_id], references: [id])
  departamento        departamentos?    @relation(fields: [departamento_id], references: [id])
  unidad              unidades?         @relation(fields: [unidad_id], references: [id])
  
  // Relaciones inversas
  proyectos_creados           proyectos[]           @relation("UsuarioCreador")
  documentos_creados          documentos[]          @relation("UsuarioCreador")
  documentos_subidos          documentos[]          @relation("UsuarioSubidor")
  carpetas_creadas            carpetas[]
  etapas_creadas              etapas_registro[]     @relation("UsuarioCreadorEtapa")
  etapas_asignadas            etapas_registro[]     @relation("InspectorFiscal")
  inspector_fiscal_asignado   inspector_fiscal[]
  auditorias_realizadas       auditorias[]
  archivo_historial_creado    archivo_historial[]
  carpetas_auditoria_creadas  carpetas_auditoria[]
  alertas_creadas             alertas[]             @relation("UsuarioCreadorAlerta")
  alertas_asignadas           alertas[]             @relation("UsuarioAsignadoAlerta")
}

model perfiles {
  id          Int      @id @default(autoincrement())
  nombre      String   @db.VarChar(50)
  descripcion String?

  // Relaciones inversas
  usuarios usuarios[]
}

model divisiones {
  id          Int      @id @default(autoincrement())
  nombre      String   @db.VarChar(100)
  descripcion String?
  activa      Boolean  @default(true)
  created_at  DateTime @default(now())

  // Relaciones inversas
  usuarios      usuarios[]
  departamentos departamentos[]
  unidades unidades[]
  proyectos     proyectos[]
}

model departamentos {
  id          Int      @id @default(autoincrement())
  nombre      String   @db.VarChar(100)
  descripcion String?
  division_id Int
  activo      Boolean  @default(true)
  created_at  DateTime @default(now())

  // Relaciones
  division divisiones @relation(fields: [division_id], references: [id])

  // Relaciones inversas
  usuarios  usuarios[]
  unidades  unidades[]
  proyectos proyectos[]
}

model unidades {
  id              Int      @id @default(autoincrement())
  nombre          String   @db.VarChar(100)
  descripcion     String?
  departamento_id Int
  division_id Int
  activa          Boolean  @default(true)
  created_at      DateTime @default(now())

  // Relaciones
  departamento departamentos @relation(fields: [departamento_id], references: [id])
  division divisiones @relation(fields: [division_id], references: [id])

  // Relaciones inversas
  usuarios  usuarios[]
  proyectos proyectos[]
}

model etapas_tipo {
  id          Int    @id @default(autoincrement())
  nombre      String @db.VarChar(100)
  descripcion String?
  color       String? @db.VarChar(20)
  carpetas_iniciales Json @default("{}")
  
  // Información de la etapa
  tipo_iniciativa Boolean   @default(false)
  tipo_obra Boolean   @default(false)
  region Boolean   @default(false)
  provincia Boolean   @default(false)
  comuna Boolean   @default(false)
  volumen Boolean   @default(false)
  
  // Información financiera
  presupuesto_oficial Boolean   @default(false)
  valor_referencia Boolean   @default(false)
  bip Boolean   @default(false)
  
  // Fechas importantes
  fecha_llamado_licitacion Boolean   @default(false)
  fecha_recepcion_ofertas_tecnicas Boolean   @default(false)
  fecha_apertura_ofertas_economicas Boolean   @default(false)
  fecha_inicio_concesion Boolean   @default(false)
  plazo_total_concesion Boolean   @default(false)
  
  // Información de la adjudicación
  decreto_adjudicacion Boolean   @default(false)
  sociedad_concesionaria Boolean   @default(false)
  
  // Inspector fiscal asignado
  inspector_fiscal_id Boolean   @default(false)

  // Relaciones inversas
  etapas_registro etapas_registro[]
  carpetas carpetas[]
  carpetas_transversales carpetas_transversales[]
}

model tipos_iniciativas {
  id    Int    @id @default(autoincrement())
  nombre String @db.VarChar(100)
  
  // Relaciones inversas
  etapas_registro etapas_registro[]
}

model tipos_obras {
  id    Int    @id @default(autoincrement())
  nombre String @db.VarChar(100)
  
  // Relaciones inversas
  etapas_registro etapas_registro[]
}

model regiones {
  id          Int     @id @default(autoincrement())
  codigo      String  @unique @db.VarChar(5)
  nombre      String  @db.VarChar(100)
  nombre_corto String? @db.VarChar(50)
  activa      Boolean @default(true)
  created_at  DateTime @default(now())
  
  // Relaciones inversas
  provincias provincias[]
  comunas    comunas[]
  etapas_registro etapas_registro[]
}

model provincias {
  id          Int     @id @default(autoincrement())
  codigo      String  @unique @db.VarChar(5)
  nombre      String  @db.VarChar(100)
  region_id   Int
  activa      Boolean @default(true)
  created_at  DateTime @default(now())
  
  // Relaciones
  region regiones @relation(fields: [region_id], references: [id])
  
  // Relaciones inversas
  comunas comunas[]
  etapas_registro etapas_registro[]
}

model comunas {
  id          Int     @id @default(autoincrement())
  nombre      String  @db.VarChar(100)
  provincia_id Int
  region_id   Int
  activa      Boolean @default(true)
  created_at  DateTime @default(now())
  
  // Relaciones
  provincia provincias @relation(fields: [provincia_id], references: [id])
  region regiones @relation(fields: [region_id], references: [id])
  
  // Relaciones inversas
  etapas_registro etapas_registro[]
}

// Modificación de etapas_registro para usar las nuevas tablas
model etapas_registro {
  id                                    Int       @id @default(autoincrement())
  etapa_tipo_id                         Int
  proyecto_id                           Int
  
  // Información de la etapa
  tipo_iniciativa_id                    Int?
  tipo_obra_id                          Int?
  region_id                             Int?
  provincia_id                          Int?
  comuna_id                             Int?
  volumen                               String?
  
  // Información financiera
  presupuesto_oficial                   String?
  valor_referencia                      String?   @db.VarChar(255)
  bip                                   String?
  
  // Fechas importantes
  fecha_llamado_licitacion              DateTime? @db.Date
  fecha_recepcion_ofertas_tecnicas      DateTime? @db.Date
  fecha_apertura_ofertas_economicas     DateTime? @db.Date

  // Información de la adjudicación
  decreto_adjudicacion                  String?
  sociedad_concesionaria               String?   @db.VarChar(255)

  fecha_inicio_concesion                DateTime? @db.Date
  plazo_total_concesion                 String?
  
  // Inspector fiscal asignado - se asgina con usuario?
  inspector_fiscal_id                   Int?
  
  // Auditoria
  usuario_creador                       Int
  fecha_creacion                        DateTime  @default(now())
  fecha_actualizacion                   DateTime  @default(now()) @updatedAt
  activa                                Boolean   @default(true)

  // Relaciones
  etapa_tipo         etapas_tipo @relation(fields: [etapa_tipo_id], references: [id])
  proyecto           proyectos @relation(fields: [proyecto_id], references: [id])
  tipo_iniciativa    tipos_iniciativas? @relation(fields: [tipo_iniciativa_id], references: [id])
  tipo_obra         tipos_obras? @relation(fields: [tipo_obra_id], references: [id])
  region            regiones? @relation(fields: [region_id], references: [id])
  provincia         provincias? @relation(fields: [provincia_id], references: [id])
  comuna            comunas? @relation(fields: [comuna_id], references: [id])
  inspector_fiscal   usuarios? @relation("InspectorFiscal", fields: [inspector_fiscal_id], references: [id])
  usuario_creador_rel usuarios @relation("UsuarioCreadorEtapa", fields: [usuario_creador], references: [id])

  // Relaciones inversas
  alertas   alertas[]
}

model proyectos {
  id                 Int       @id @default(autoincrement())
  carpeta_inicial    Json?
  nombre             String    @db.VarChar(255)
  division_id        Int?
  departamento_id    Int?
  unidad_id          Int?
  creado_por         Int
  created_at         DateTime  @default(now())
  eliminado          Boolean   @default(false)

  // Campos para manejo de S3
  s3_bucket_name     String?   @db.VarChar(100)
  s3_root_path       String?   @db.VarChar(500)
  s3_folder_created  Boolean   @default(false)
  
  // Información de la carpeta raíz del proyecto
  carpeta_raiz_id    Int?
  
  // Relaciones
  division       divisiones?     @relation(fields: [division_id], references: [id])
  departamento   departamentos?  @relation(fields: [departamento_id], references: [id])
  unidad         unidades?       @relation(fields: [unidad_id], references: [id])
  creador        usuarios        @relation("UsuarioCreador", fields: [creado_por], references: [id])
  carpeta_raiz   carpetas?       @relation("ProyectoCarpetaRaiz", fields: [carpeta_raiz_id], references: [id])

  // Relaciones inversas
  etapas_registro              etapas_registro[]
  concesiones              concesiones[]
  externos_involucrados    externos_involucrados[]
  fechas_clave            fechas_clave[]
  inspector_fiscal_asignado inspector_fiscal[]
  carpetas                carpetas[]
  documentos              documentos[]
  alertas                 alertas[]
}

model alertas {
  id                      Int       @id @default(autoincrement())
  proyecto_id             Int?
  concesion_id            Int?
  etapa_registro_id       Int?
  documento_id            String?   @db.Uuid
  
  tipo_alerta             String    @db.VarChar(50)
  descripcion             String?
  
  fecha_alerta            DateTime
  fecha_vencimiento       DateTime?
  
  estado                  String    @default("activa") @db.VarChar(30)
  automatica              Boolean   @default(false)
  
  usuario_creador         Int
  usuario_asignado        Int?
  
  fecha_creacion          DateTime  @default(now())
  
  notificacion_enviada    Boolean   @default(false)
  
  activa                  Boolean   @default(true)

  // Relaciones
  proyecto         proyectos?        @relation(fields: [proyecto_id], references: [id])
  concesion        concesiones?      @relation(fields: [concesion_id], references: [id])
  etapa_registro   etapas_registro?  @relation(fields: [etapa_registro_id], references: [id])
  documento        documentos?       @relation(fields: [documento_id], references: [id])
  creador          usuarios          @relation("UsuarioCreadorAlerta", fields: [usuario_creador], references: [id])
  asignado         usuarios?         @relation("UsuarioAsignadoAlerta", fields: [usuario_asignado], references: [id])
}

model concesiones {
  id                Int       @id @default(autoincrement())
  codigo_concesion  String    @unique @db.VarChar(50)
  proyecto_id       Int
  nombre            String    @db.VarChar(255)
  descripcion       String?
  estado            String?   @db.VarChar(30)
  fecha_inicio      DateTime? @db.Date
  fecha_termino     DateTime? @db.Date
  tipo_obra         String?   @db.VarChar(100)
  ubicacion         String?   @db.VarChar(255)
  created_at        DateTime  @default(now())

  // Relaciones
  proyecto proyectos @relation(fields: [proyecto_id], references: [id])

  // Relaciones inversas
  obras_concesionadas obras_concesionadas[]
  fechas_clave       fechas_clave[]
  alertas            alertas[]
}

model obras_concesionadas {
  id            Int       @id @default(autoincrement())
  concesion_id  Int
  nombre        String    @db.VarChar(255)
  descripcion   String?
  tipo_obra     String?   @db.VarChar(100)
  estado        String?   @db.VarChar(30)
  fecha_inicio  DateTime? @db.Date
  fecha_termino DateTime? @db.Date
  ubicacion     String?   @db.VarChar(255)
  presupuesto   Decimal?  @db.Decimal(18, 2)

  // Relaciones
  concesion concesiones @relation(fields: [concesion_id], references: [id])
}

model empresas {
  id                  Int      @id @default(autoincrement())
  rut                 String   @unique @db.VarChar(12)
  razon_social        String   @db.VarChar(255)
  nombre_fantasia     String?  @db.VarChar(255)
  direccion           String?
  telefono            String?  @db.VarChar(20)
  email               String?  @db.VarChar(100)
  representante_legal String?  @db.VarChar(255)
  activa              Boolean  @default(true)
  created_at          DateTime @default(now())

  // Relaciones inversas
  externos_involucrados externos_involucrados[]
}

model asesores {
  id           Int      @id @default(autoincrement())
  rut          String   @unique @db.VarChar(12)
  nombre       String   @db.VarChar(100)
  apellido     String   @db.VarChar(100)
  especialidad String?  @db.VarChar(100)
  telefono     String?  @db.VarChar(20)
  email        String?  @db.VarChar(100)
  activo       Boolean  @default(true)
  created_at   DateTime @default(now())

  // Relaciones inversas
  externos_involucrados externos_involucrados[]
}

model externos_involucrados {
  id                  Int       @id @default(autoincrement())
  proyecto_id         Int
  empresa_id          Int?
  asesor_id           Int?
  tipo_participacion  String    @db.VarChar(50)
  rol                 String    @db.VarChar(100)
  fecha_inicio        DateTime? @db.Date
  fecha_termino       DateTime? @db.Date
  activo              Boolean   @default(true)

  // Relaciones
  proyecto proyectos @relation(fields: [proyecto_id], references: [id])
  empresa  empresas? @relation(fields: [empresa_id], references: [id])
  asesor   asesores? @relation(fields: [asesor_id], references: [id])
}

model fechas_clave {
  id                Int       @id @default(autoincrement())
  proyecto_id       Int?
  concesion_id      Int?
  tipo_fecha        String    @db.VarChar(50)
  fecha_programada  DateTime? @db.Date
  fecha_real        DateTime? @db.Date
  descripcion       String?
  es_hito_critico   Boolean   @default(false)

  // Relaciones
  proyecto  proyectos?   @relation(fields: [proyecto_id], references: [id])
  concesion concesiones? @relation(fields: [concesion_id], references: [id])
}

model inspector_fiscal {
  id                 Int       @id @default(autoincrement())
  proyecto_id        Int
  usuario_id         Int
  fecha_asignacion   DateTime? @db.Date
  fecha_termino      DateTime? @db.Date
  activo             Boolean   @default(true)
  observaciones      String?

  // Relaciones
  proyecto proyectos @relation(fields: [proyecto_id], references: [id])
  usuario  usuarios  @relation(fields: [usuario_id], references: [id])
}

model registro_documental {
  id                   Int       @id @default(autoincrement())
  documento_id         String    @db.Uuid
  descripcion          String?
  fecha_comprometida   DateTime? @db.Date
  fecha_cumplimiento   DateTime? @db.Date
  cumplido             Boolean   @default(false)
  alerta_30            Boolean   @default(false)
  alerta_15            Boolean   @default(false)
  alerta_5             Boolean   @default(false)

  // Relación con documentos
  documento documentos @relation(fields: [documento_id], references: [id])
}

model carpetas {
  id                          Int      @id @default(autoincrement())
  nombre                      String   @db.VarChar(255)
  descripcion                 String?
  carpeta_padre_id            Int?
  
  proyecto_id                 Int?
  etapa_tipo_id               Int?
  carpeta_transversal_id      Int?
  
  // Información de S3
  s3_path                     String   @db.VarChar(500)
  s3_bucket_name              String?  @db.VarChar(100)
  s3_created                  Boolean  @default(false)
  
  // Información de permisos y configuración
  orden_visualizacion         Int      @default(0)
  max_tamaño_mb               Int?
  tipos_archivo_permitidos    String[]
  permisos_lectura            String[] @default([])
  permisos_escritura          String[] @default([])
  
  // Metadatos
  usuario_creador             Int
  fecha_creacion              DateTime @default(now())
  fecha_actualizacion         DateTime @default(now()) @updatedAt
  activa                      Boolean  @default(true)

  // Relaciones
  carpeta_padre   carpetas?     @relation("CarpetaHijos", fields: [carpeta_padre_id], references: [id])
  proyecto        proyectos?    @relation(fields: [proyecto_id], references: [id])
  etapa_tipo      etapas_tipo?  @relation(fields: [etapa_tipo_id], references: [id])
  carpeta_transversal carpetas_transversales? @relation(fields: [carpeta_transversal_id], references: [id])
  creador         usuarios      @relation(fields: [usuario_creador], references: [id])

  // Relaciones inversas
  carpetas_hijas        carpetas[]             @relation("CarpetaHijos")
  documentos            documentos[]
  carpetas_auditoria    carpetas_auditoria[]
  proyectos_carpeta_raiz proyectos[]           @relation("ProyectoCarpetaRaiz")
}

model documentos {
  id String @id @default(uuid()) @db.Uuid
  nombre_archivo              String    @db.VarChar(255)
  extension                   String?   @db.VarChar(10)
  tamano                      BigInt?
  tipo_mime                   String?   @db.VarChar(100)
  fecha_creacion              DateTime  @default(now())
  usuario_creador             Int
  descripcion                 String?
  categoria                   String?   @db.VarChar(100)
  estado                      String?   @db.VarChar(30)
  version                     String?   @db.VarChar(10)
  archivo_relacionado         String?   @db.Uuid
  
  carpeta_id                  Int
  tipo_documento_id          Int?
  
  // Información de S3
  s3_path                     String?   @db.VarChar(500)
  s3_bucket_name              String?   @db.VarChar(100)
  s3_created                  Boolean   @default(false)
  hash_integridad             String?   @db.VarChar(255)
  etiquetas                   String[]
  fecha_ultima_actualizacion  DateTime  @default(now()) @updatedAt
  
  proyecto_id                 Int?
  subido_por                  Int
  metadata                    Json?
  eliminado                   Boolean   @default(false)

  // Relaciones
  carpeta             carpetas   @relation(fields: [carpeta_id], references: [id])
  creador             usuarios   @relation("UsuarioCreador", fields: [usuario_creador], references: [id])
  subio_por           usuarios   @relation("UsuarioSubidor", fields: [subido_por], references: [id])
  proyecto            proyectos? @relation(fields: [proyecto_id], references: [id])
  documento_relacionado documentos? @relation("DocumentosRelacionados", fields: [archivo_relacionado], references: [id])
  tipo_documento      tipos_documentos? @relation(fields: [tipo_documento_id], references: [id])

  // Relaciones inversas
  documentos_relacionados documentos[]           @relation("DocumentosRelacionados")
  archivo_historial      archivo_historial[]
  registro_documental    registro_documental[]
  alertas                alertas[]
}

model carpetas_auditoria {
  id               Int      @id @default(autoincrement())
  carpeta_id       Int
  usuario_id       Int
  accion           String   @db.VarChar(50)
  detalle_anterior Json?
  detalle_nuevo    Json?
  fecha            DateTime @default(now())

  // Relaciones
  carpeta carpetas @relation(fields: [carpeta_id], references: [id])
  usuario usuarios @relation(fields: [usuario_id], references: [id])
}

model archivo_historial {
  id               Int      @id @default(autoincrement())
  archivo_id       String   @db.Uuid
  usuario_id       Int
  accion           String   @db.VarChar(50)
  descripcion      String?
  fecha            DateTime @default(now())
  version_anterior String?
  version_nueva    String?

  // Relaciones
  archivo documentos @relation(fields: [archivo_id], references: [id])
  usuario usuarios   @relation(fields: [usuario_id], references: [id])
}

model auditorias {
  id          Int      @id @default(autoincrement())
  usuario_id  Int
  accion      String   @db.VarChar(100)
  entidad     String   @db.VarChar(50)
  entidad_id  Int
  descripcion String?
  fecha       DateTime @default(now())

  // Relaciones
  usuario usuarios @relation(fields: [usuario_id], references: [id])
}

model tipos_documentos {
  id                    Int      @id @default(autoincrement())
  nombre                String   @db.VarChar(255)
  descripcion           String?
  
  // Requisitos del documento
  requiere_nro_pro_exp  Boolean  @default(false)
  requiere_saf_exp      Boolean  @default(false)
  requiere_numerar      Boolean  @default(false)
  requiere_tramitar     Boolean  @default(false)
  
  // Metadatos
  activo                Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now()) @updatedAt

  // Relaciones inversas
  documentos documentos[]
}

model carpetas_transversales {
  id                    Int         @id @default(autoincrement())
  nombre                String      @db.VarChar(255)
  descripcion           String?
  color                 String      @db.VarChar(20)
  orden                 Int?
  activa                Boolean     @default(true)
  etapa_tipo_id         Int?
  estructura_carpetas   Json?       @default("{}")
  etapa_tipo            etapas_tipo? @relation(fields: [etapa_tipo_id], references: [id])
  
  // Relaciones inversas
  carpetas carpetas[]
}